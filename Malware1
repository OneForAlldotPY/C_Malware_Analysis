#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void execute_payload() {
    // Simulated payload: print a message
    printf("Malware payload executed!\n");
}

void hide_payload() {
    // Simulate hiding the payload by obfuscating its presence
    // This is just for demonstration and doesn't actually hide anything
    printf("Payload hidden.\n");
}

void simulate_malware() {
    char input[100];
    printf("Enter the secret passphrase: ");
    fgets(input, sizeof(input), stdin);
    // Remove newline character
    input[strcspn(input, "\n")] = 0;

    if (strcmp(input, "s3cr3t") == 0) {
        execute_payload();
    } else {
        printf("Access denied.\n");
    }
}

int main() {
    hide_payload();
    simulate_malware();
    return 0;
}


/*Q&A
1 - What is the purpose of the "execute_payload" function, and when is it called?
    {
    execute_payload function purpose is to print a message whenever the payload is run correctly, it is called inside simulate_malware
    function if the input is "s3cr3t" else it gives access denied
    }
2 - Role of hide-paylaod
    {
    the hide_payload is simply used in the provided code for demonstration purposes and does not really have any effect in the code
    as it has no logic inside of it
    }
3 - What is the significance of the strcmp function in the simulate_malware function?
    {
    The strcmp inside the simulate_malware function is a way to compare if the input from the user is equal to the word
    "s3cr3t and if so it proceeds to execute the payload else it denies the access."
    }
4 - Identify any potential security vulnerabilities in the code.
    {
    The input field inside the simulate_malware function is a potential vulnerability as the input is not really limited to only
    100 character (this because there is not error handling in case of a bigger or negative input or any other way of 
    tampering with the input), which could lead to a buffer overflow attack. Another is that there is no input validation, allowing
    for injection of unexpected characters and/or strings.
    }
5 - Improvements and Mitigations for the code
    {
    Complete the function to hide the malware and use actual obsfuscation; add an error handling to the code and restrict the input to only the wanted character
    types;
    Implement proper input validation and bounds checking to prevent buffer overflows. An example is the usage of "fgets" instead of
    "gets" to limit the limit of characters read;
    Encrypting the passphrase "s3cr3t" to prevent easy detection;
    }
*/ 
