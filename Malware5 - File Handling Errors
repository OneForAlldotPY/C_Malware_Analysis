#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void process_file(char *filename) {
    FILE *fp;
    char buffer[256];
    
    fp = fopen(filename, "r");
    if (fp == NULL) {
        printf("Error opening file!\n");
        return;
    }
    
    fgets(buffer, sizeof(buffer), fp);
    printf("Read from file: %s\n", buffer);
    
    fclose(fp);
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <filename>\n", argv[0]);
        return 1;
    }
    
    process_file(argv[1]);
    
    return 0;
}


/* Q&A File Handling errors

1 - What is the purpose of the process_file function, and how does it work?
    
    {
    The process_file function is responsible for opening the file "filename" in reading mode "r". It then prints out all the contents
    from the buffer that takes a maximum of 255 characters. It also handles any error printing them in case fp == NULL
    }

2 - What potential security vulnerability exists in this code?
    
    {
    The code presents an insecure file inclusion and or file handling vulnerability given the lack of verification of the 
    filename given as input by the user.
    }

3 - How can an attacker exploit the identified vulnerability?
    {
    An attacker can exploit the vulnerability by providing a malicious filename that includes directory traversal characters
    like ../ which could then point to sensitive system files/info. 
    }

4 - What is the role of the fopen function in this vulnerability?

    {
    The fopen function in the code works in order to open the filename. In the vulnerability fopen is not preceeded or proceeded with
    any function or code/logic to sanitize and verify the url provided.
    }

5 - Suggest potential improvements or mitigations to secure the code.
    {
    Add a function to sanitize the input for the url and blacklist the unwanted characters; limit the buffer size; Use fopen_s 
    when/where possible instead of fopen.
    }
*/