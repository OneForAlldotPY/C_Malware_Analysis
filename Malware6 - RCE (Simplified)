#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void execute_command(char* command) {
    char buffer[128];
    snprintf(buffer, sizeof(buffer), "ping %s", command);
    system(buffer);
}

int main(int argc, char* argv[]) {
    if (argc != 2) {
        printf("Usage: %s <IP/Hostname>\n", argv[0]);
        return 1;
    }

    execute_command(argv[1]);
    return 0;
}


/* Q&A - A simple remote code execution example

1 - What is the purpose of the execute_command function, and how does it work?

    The execute_command function constructs and executes a system command using the "system" function. It takes an input from the user,
    has a set limit for the bufer of 128 characters and then prints the command provided form the user

2 - What potential security vulnerability exists in this code?

    The code is vulnerable to code execution as the system logic does not handle the type of input from the user

3 - How can an attacker exploit the identified vulnerability?

    By passing more arguments to the input and harmful ones too...

4 - What is the role of the system function in this vulnerability?

    System Function is function is used to execute the formatted command in the shell. 
    Because it executes the command as-is, it can run any shell command, including malicious ones if the input is not properly sanitized.

5 - Suggest potential improvements or mitigations to secure the code.

    Using exec instead of system; Validation/Sanitization; 
*/